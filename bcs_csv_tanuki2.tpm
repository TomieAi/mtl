{"files":[{"pattern":"*.csv","rules":[{"type":"regex","pattern":"/\\$menu_item \\d,(.*?),/g","captureGroups":"1"},{"type":"function","function":"   try {\r\n        // Step 1: Split the CSV text into lines\r\n        const lines = text.split('\\n');\r\n\r\n        // Step 2: Extract headers from the first line (optional for now but can be useful)\r\n        const headers = lines[0].split(',');\r\n\r\n        const offsets = {\r\n            TrueNames: [],   // Will hold the offsets for columns 7 and 8\r\n            Dialogs: []       // Will hold the offsets for column 20\r\n        };\r\n\r\n        // Ensure there are enough columns in the CSV\r\n        if (headers.length <= 20) {\r\n            throw new Error(\"CSV does not have column 7, 8, or 20.\");\r\n        }\r\n\r\n        let currentPosition = 0;  // Keeps track of the overall position in the CSV string\r\n\r\n        function parseCsvLine(line) {\r\n            const fields = [];\r\n            let currentField = '';\r\n            let insideQuotes = false;\r\n        \r\n            for (const char of line) {\r\n                if (char === '\"') {\r\n                    insideQuotes = !insideQuotes; // Toggle the insideQuotes state\r\n                } else if (char === ',' && !insideQuotes) {\r\n                    fields.push(currentField.trim());\r\n                    currentField = ''; // Reset for the next field\r\n                } else {\r\n                    currentField += char; // Add the character to the current field\r\n                }\r\n            }\r\n        \r\n            // Push the last field after the loop\r\n            fields.push(currentField.trim());\r\n        \r\n            return fields;\r\n        }\r\n        \r\n        // Step 3: Parse the lines and find the offsets for columns 7, 8, and 20\r\n        for (let i = 1; i < lines.length; i++) {\r\n            const currentLine = parseCsvLine(lines[i]);\r\n\r\n            // We need to extract values from columns 7, 8, and 20 (zero-indexed columns 6, 7, 19)\r\n            const columnsToCheck = [7, 8, 20];\r\n\r\n            columnsToCheck.forEach(index => {\r\n                if (currentLine.length > index) {\r\n                    const value = currentLine[index];\r\n                    const start = text.indexOf(value, currentPosition);  // Find the position of the value in the text\r\n                    const end = start + value.length;  // End position is start + length of the value\r\n\r\n                    // Store the offsets in separate arrays\r\n                    if (index === 7 || index === 8) {\r\n                        // For columns 7 and 8, add to the 'col7and8' array\r\n                        offsets.TrueNames.push({ start, end, context:\"names\" });\r\n                    } else if (index === 20) {\r\n                        // For column 20, add to the 'col20' array\r\n                        offsets.Dialogs.push({ start, end, context:\"dialog\" });\r\n                    }\r\n\r\n                    // Update currentPosition to be after this value's text\r\n                    currentPosition = end;\r\n                }\r\n            });\r\n        }\r\n\r\n        // Concatenate the results: all offsets for columns 7 and 8 first, then column 20\r\n        return [...offsets.TrueNames, ...offsets.Dialogs];\r\n\r\n    } catch (error) {\r\n        console.error(\"Error processing CSV:\", error);\r\n        throw error;  // Re-throw the error for further handling if needed\r\n    }"}],"toGrid":"","beforeWrite":"  return text.replace(/\"\"/g, \"'\");","fromGrid":"let final_text = text\r\n        .replace(/``(.*?)''/g, \"「\\$1」\")\r\n        .replace(/\"/g, '`')         // Replace all double quotes with backticks\r\n        .replace(/'/g, '`')         // Replace all single quotes with backticks\r\n        .replace(/\\u3000/g, ' ')    // Replace full-width space (Unicode U+3000) with normal space\r\n        .replace(/\\p{Cf}/gu, '');   // Remove zero-width space (Unicode U+200B)\r\n\r\nif(final_text.includes(\",\")){\r\n    return `\"${final_text}\"`;\r\n}\r\nreturn final_text;","options":{"readEncoding":"Shift_JIS","writeEncoding":"Shift_JIS"}}],"options":{"testData":"%line%,%seq%,%effect%,%music%,%bg%,%cg%,%ov%,%truename%,%name%,%voice%,%st0_name%,%st0_pos%,%st0_face%,%st1_name%,%st1_pos%,%st1_face%,%st2_name%,%st2_pos%,%st2_face%,%pageflag%,%text%\r\n484400 ,,,,,,,甜花,甜花,312_TC08_t_009.wav,komako,,1,,,,tenka,,1,,「う……うん」\r\n484600 ,,<s_fade time=\"\"1\"\"><se file=\"\"water_spill\"\">,,,,,,,,,,,chie,,4,,,,,\r\n484603 ,,<s_fade time=\"\"1\"\"><se file=\"\"water_spill\"\">,,,,,,,,,,,chie,,4,,,,,――わっ！\r\n484700 ,,\"<shake target=\"\"st\"\" time=\"\"600,600\"\" x=\"\"50,190,0\"\" y=\"\"0,0,0\"\">\",,,,,千恵,千恵,312_TC08_c_004.wav,,,,chie,,4,,,,,「――わっ！」\r\n145800 ,,<s_fade time=\"\"800\"\" type=\"\"wipe\"\" param=\"\"dir=right&width=500\"\">,,31,,,甜花,甜花,015_CB09_t_021.wav,,,,chie,,21,tenka,,32,,「……ちぃって、もしかしてネーミングセンスない？」\r\n57400 ,,\"<shake id=\"\"1\"\" target=\"\"sc\"\" time=\"\"1200,1200\"\" x=\"\"38,100,0\"\" y=\"\"0,0,0\"\">\",,,2201000,,主人公,＜名＞,,,,,,,,,,,,「うぎゃあ！？」\r\n↓,\"$menu_item 0,変更する,yes\",,,,,,,,,,,,,,,,,,,\r\n↓,\"$menu_item 1,変更しない,no\",,,,,,,,,,,,,,,,,,,"}}